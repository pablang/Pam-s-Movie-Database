{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","movies","searchTerm","isFetching","handleSubmit","e","preventDefault","url","axios","get","then","res","console","log","setState","data","Search","handleChange","target","value","removeMovie","indexOfMovie","filter","movie","imdbID","renderMovie","key","className","Title","Year","src","Poster","alt","onClick","this","onSubmit","action","onChange","type","map","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0SA+FeA,E,2MA/EbC,MAAQ,CACNC,OAAQ,GACRC,WAAY,GACZC,YAAY,G,EAGdC,aAAe,SAAAC,GAEbA,EAAEC,iBAFgB,IAMVJ,EAAe,EAAKF,MAApBE,WACFK,EAAG,oCAAgCL,EAAhC,oBACTM,IAAMC,IAAIF,GAAKG,KAAK,SAAAC,GAClBC,QAAQC,IAAIF,GAEZ,EAAKG,SAAS,CACZb,OAAQU,EAAII,KAAKC,OACjBb,YAAY,MAGhB,EAAKW,SAAS,CACZX,YAAY,K,EAIhBc,aAAe,SAAAZ,GACb,EAAKS,SAAS,CACZZ,WAAYG,EAAEa,OAAOC,S,EAIzBC,YAAc,SAACC,GAAkB,IACvBpB,EAAW,EAAKD,MAAhBC,OACR,EAAKa,SAAS,CACZb,OAAQA,EAAOqB,OAAO,SAACC,GAAD,OAAWA,EAAMC,SAAWH,O,EAKtDI,YAAc,SAAAF,GAAK,OAIjB,yBAAKG,IAAKH,EAAMC,OAAQG,UAAU,mBAChC,4BAAKJ,EAAMK,OACX,2BAAIL,EAAMM,MACV,yBAAKC,IAAKP,EAAMQ,OAAQC,IAAI,KAC5B,4BAAQC,QAAS,kBAAM,EAAKb,YAAYG,EAAMC,UAA9C,Y,wEAMO,IAAD,EACuBU,KAAKlC,MAA5BC,EADA,EACAA,OAAQE,EADR,EACQA,WAEhB,OACE,yBAAKwB,UAAU,OACb,oCACA,mDAEA,0BAAMQ,SAAUD,KAAK9B,aAAcgC,OAAO,IACxC,2BAAOC,SAAUH,KAAKjB,aAAcqB,KAAK,SACzC,2CAGF,iCAEMnC,EACF,yCACAF,EAAOsC,IAAIL,KAAKT,mB,GA1EVe,IAAMC,WCFJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC,iB","file":"static/js/main.3728deb9.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios'\n// import logo from './logo.svg';\nimport './App.css';\n\nfunction Movie (props) {\n  return (\n    <div onClick={() => props.onRemove(props.data.imdbID)}>\n      <h2>{props.data.Title}</h2>\n      <p>{props.data.Year}</p>\n    </div>\n  )\n}\n\nclass App extends React.Component {\n\n  state = {\n    movies: [],\n    searchTerm: '',\n    isFetching: false\n  }\n\n  handleSubmit = e => {\n    // prevent default of the form\n    e.preventDefault()\n    // get moveie title from input box\n    // make a request to omdb api\n    //  we need a module - axios\n    const { searchTerm } = this.state\n    const url = `http://www.omdbapi.com/?s=${searchTerm}&apikey=2f6435d9`\n    axios.get(url).then(res => {\n      console.log(res) // res comes back with metadata so you need to specify its only data\n\n      this.setState({\n        movies: res.data.Search,\n        isFetching: false\n      })\n    })\n    this.setState({\n      isFetching: true\n    })\n  }\n\n  handleChange = e =>{\n    this.setState({\n      searchTerm: e.target.value\n    })\n  }\n\n  removeMovie = (indexOfMovie) => {\n    const { movies } = this.state\n    this.setState({\n      movies: movies.filter((movie) => movie.imdbID !== indexOfMovie)\n    })\n  }\n\n  // this function is can also go into the JSX but it looks neater if you remove it\n  renderMovie = movie => (\n    // give it a key so it has a uniqueID\n    // we already have one from the movie api under imdbID\n    // the removeMovie function is wrapped in another function to make it a callback\n    <div key={movie.imdbID} className=\"movie-container\">\n      <h2>{movie.Title}</h2>\n      <p>{movie.Year}</p>\n      <img src={movie.Poster} alt=\"\"/>\n      <button onClick={() => this.removeMovie(movie.imdbID)}>Remove</button>\n    </div>\n  )\n\n\n\n  render () {\n    const { movies, isFetching } = this.state\n\n    return (\n      <div className=\"App\">\n        <h1>PMDB</h1>\n        <p>Pam's movie database</p>\n        {/* add a eventlistener on the form */}\n        <form onSubmit={this.handleSubmit} action=\"\">\n          <input onChange={this.handleChange} type=\"text\"/>\n          <button>search</button>\n        </form>\n\n        <section>\n\n            { isFetching ?\n            <p>loading...</p> :\n            movies.map(this.renderMovie) }\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}